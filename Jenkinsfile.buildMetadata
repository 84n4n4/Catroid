#!groovy

/*
 * Catroid: An on-device visual programming system for Android devices
 * Copyright (C) 2010-2019 The Catrobat Team
 * (<http://developer.catrobat.org/credits>)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * An additional term exception under section 7 of the GNU Affero
 * General Public License, version 3, is available at
 * http://developer.catrobat.org/license_additional_term
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

pipeline {
    agent {
        dockerfile {
            filename 'Dockerfile.jenkins'
            // 'docker build' would normally copy the whole build-dir to the container, changing the
            // docker build directory avoids that overhead
            dir 'docker'
            // Pass the uid and the gid of the current user (jenkins-user) to the Dockerfile, so a
            // corresponding user can be added. This is needed to provide the jenkins user inside
            // the container for the ssh-agent to work.
            // Another way would be to simply map the passwd file, but would spoil additional information
            // Also hand in the group id of kvm to allow using /dev/kvm.
            additionalBuildArgs '--build-arg USER_ID=$(id -u) --build-arg GROUP_ID=$(id -g) --build-arg KVM_GROUP_ID=$(getent group kvm | cut -d: -f3)'
            args '--device /dev/kvm:/dev/kvm -v /var/local/container_shared/gradle_cache/$EXECUTOR_NUMBER:/home/user/.gradle -m=6.5G'
            label 'LimitedEmulator'
        }
    }

    options {
        timeout(time: 6, unit: 'HOURS')
        timestamps()
    }

    stages {
        stage('Prepare build') {
            steps {
                script {
                    currentBuild.displayName = "#${env.BUILD_NUMBER} | ${env.flavor} | ${env.gitBranch}"
                }
            }
        }

        stage('Setup Translations') {
            steps {
                script {
                    if (env.flavor == 'Playground') {
                        sh '''
                            set +x
                            ./gradlew generateCrowdinMetadataCatroid -PcrowdinKey=$crowdinKey
                        '''
                    } else {
                        sh '''
                            set +x
                            ./gradlew generateCrowdinMetadata${flavor} -PcrowdinKey=$crowdinKey
                        '''
                    }
                }
            }
        }

        stage('Start emulator') {
            steps {
                sh './gradlew -Pemulator=android24 startEmulator'
            }
        }

        stage('Create Screenshots') {
            steps {
                script {
                    if (env.flavor == 'Playground') {
                        sh './gradlew generateScreenshotsCatroid'
                    } else {
                        sh './gradlew generateScreenshots${flavor}'
                    }
                }
                zip zipFile: 'metadata.zip', archive: false, dir: 'fastlane/metadata'
                archiveArtifacts artifacts: 'metadata.zip', fingerprint: true
            }
            post {
                always {
                    sh './gradlew stopEmulator'
                }

                success {
                    publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: 'fastlane/metadata/android',
                    reportFiles: 'screenshots.html',
                    reportName: 'Screenshots'
                    ]
                }
            }
        }

        stage('Review') {
            //agent none
            options {
                timeout(time: 6, unit: 'HOURS')
            }
            steps {
                script {
                    env.APPROVE_DEPLOY = input message: 'User input required',
                        parameters: [choice(name: 'Deploy', choices: 'no\nyes',
                        description: 'Please review the Screenshots! Do you want to deploy this to Google Play?')]
                }
            }
        }

        stage('Upload Metadata') {
            when {
                environment name: 'APPROVE_DEPLOY', value: 'yes'
            }
            steps {
                sh 'fastlane android upload_Metadata_${flavor}'
            }
        }

        stage('Promote APK to production') {
            when {
                environment name: 'APPROVE_DEPLOY', value: 'yes'
            }
            steps {
                script {
                    if (env.flavor == 'Playground') {
                        echo 'Playground cannot be promoted to production!'
                    } else {
                        // deactivated for testing to not publish by accident
                        //sh 'fastlane android promote_${flavor}'
                        echo 'The promotion of the APK is currently deactivated!'
                    }
                }
            }
        }
    }

    post {
        always {
            // clean workspace
            deleteDir()
        }
        changed {
            notifyChat()
        }
    }
}
